#!/bin/sh

#
# mondieu, the portable alternative to freebsd-update
#
# Reinier Schoof <reinier@skoef.nl>
#
# https://github.com/skoef/mondieu

# TODO: how to detect files that are deprecated/delete old files
# TODO: perform signature checking of release archives
# TODO: look into etcupdate
# TODO: automatically detect right parts to deploy
# TODO: support release on local filesystem

set -e

# detect if file is the same, besides the $FreeBSD$ part
samef () {
    local X=`sed -E 's/\\$FreeBSD.*\\$/\$FreeBSD\$/' < $1 | sha256 -q`
    local Y=`sed -E 's/\\$FreeBSD.*\\$/\$FreeBSD\$/' < $2 | sha256 -q`

    [ $X = $Y ] && return 0
    return 1
}

# gzip wrapper for samef
samegz () {
    local X=$(mktemp ${TMP}/samegz.XXXX)
    local Y=$(mktemp ${TMP}/samegz.XXXX)
    zcat $1 > $X
    zcat $2 > $Y
    samef $X $Y && ret=0 || ret=1
    rm -f $X $Y
    return $ret
}

unstage() {
    local name=$(echo $1 | sed -e 's/\[/\\\[/g' -e 's/\]/\\\]/g')
    local stagefile=${TMP}/etcdiff.list
    sed -i '' "\#^${name}\$#d" ${stagefile}
}

checkyesno() {
    case ${1} in
        [Yy][Ee][Ss]|[Yy])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

cleanup() {
    local quiet=$1
    [ -z "${quiet}" ] && log_begin_msg "Cleaning up"
    find ${TMP} ${RELEASE} -flags +schg -exec chflags noschg {} \; 2>/dev/null || true
    rm -rf ${TMP} ${RELEASE}
    [ -z "${quiet}" ] && log_end_msg
    return 0
}

log_begin_msg() {
    echo -n "`date` ==> $@ ... "
}

log_end_msg() {
    echo "done"
}

indicate() {
    case ${__INDICATOR} in
        '|') __INDICATOR="/" ;;
        '/') __INDICATOR="-" ;;
        '-') __INDICATOR="\\" ;;
        '\\') __INDICATOR="|" ;;
        *) __INDICATOR='/' ;;
    esac
    printf "\b${__INDICATOR}"
}

version() {
    cat <<- EOF
mondieu version 0.2.4
EOF
}

usage() {
    cat <<- EOF
Usage: $(basename ${0}) [-h] [-V] [-y] [-d /chroot] [-p parts,to,install] [-u hostname] [-U URL] [-w file] [-x file] [-X pattern] RELEASE

    Required arguments:
        RELEASE the name of the release you want to upgrade to

    Optional arguments:
        -a Specify architecture                (default: $(uname -m))
        -d Alternative chroot                  (default: /)
        -h Show you this help
        -p specify release parts to install    (default: kernel,base)
           comma-separated
        -u hostname for fetching release       (default: ftp.freebsd.org)
           archives
        -U specific URL for fetching release
           archives. This overrides -u
        -V shows version and exits
        -w don't manually merge these files
           but overwrite with new version
        -x ignore files for manual merge
        -X ignore files for manual merge when
           matching this pattern.
        -y don't ask for confirmation, install
           the new files already (but still
           require manual merge, if needed)

    $(date "+%Y") (c) Reinier Schoof <reinier@skoef.nl>

    https://github.com/skoef/mondieu

EOF
}

# default settings
: ${PAGER=/usr/bin/more}
PARTS="kernel,base"
ROOT="/"
ARCH=$(uname -m)
HOSTNAME="ftp.freebsd.org"
INTERACTIVE=1

# parse command line arguments
if [ $# -eq 0 ]; then
    echo "Error: arguments required" >&2
    usage
    exit 1
fi

while getopts 'a:d:hp:u:U:Vw:x:X:y' opt; do
    case $opt in
        a)
            ARCH=${OPTARG}
            ;;
        d)
            if [ ! -d ${OPTARG} ]; then
                echo "Error: chroot ${OPTARG} doesn't exists" >&2
                usage
                exit 1
            fi

            if [ ! -d ${OPTARG}/etc ]; then
                echo "Error: chroot ${OPTARG} doesn't seem to contain a FreeBSD release" >&2
                usage
                exit 1
            fi

            ROOT=${OPTARG}
            ;;
        h)
            version
            usage
            exit 0
            ;;
        p)
            if ! echo ${OPTARG} | grep -qw base; then
                echo "Release parts should at least include \`base'" >&2
                usage
                exit 1
            fi

            PARTS=${OPTARG}
            ;;
        u)
            HOSTNAME=${OPTARG}
            ;;
        U)
            URL=${OPTARG}
            ;;
        V)
            version
            exit 0
            ;;
        w)
            OVERWRITE=${OPTARG}
            ;;
        x)
            EXCLUDE=${OPTARG}
            ;;
        X)
            EXCLUDE_PTR=${OPTARG}
            ;;
        y)
            INTERACTIVE=0
            ;;
        \?)
            usage
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

UPGRADE=${1}
if [ -z "${UPGRADE}" ]; then
    usage
    exit 1
fi

[ -z "${URL}" ] && URL=http://${HOSTNAME}/pub/FreeBSD/releases/${ARCH}/${UPGRADE}/

log_begin_msg "Preparing work space"

BASEDIR=$(mktemp -d /tmp/mondieu.XXXX)
RELEASE=${BASEDIR}/release
TMP=${BASEDIR}/tmp
ARCHIVE=${BASEDIR}/archives

cleanup 1
trap "cleanup" EXIT INT
mkdir ${TMP} ${RELEASE} ${ARCHIVE}
log_end_msg

# fetch archives and extract all files
log_begin_msg "Fetching release ${UPGRADE}"

# prepare release dir
if [ -d ${RELEASE} ]; then
    find ${RELEASE} -flags +schg -exec chflags noschg {} \;
    rm -r ${RELEASE}
fi
mkdir -p ${RELEASE}

echo ${PARTS} | tr ',' "\n" | while read part; do
    echo -n "${part} "
    if ! fetch -q -T 10 -o ${ARCHIVE}/${part}.txz ${URL}/${part}.txz; then
        echo -e "\nCould not fetch ${URL}/${part}.txz"
        exit 1
    fi

    tar -Jxf ${ARCHIVE}/${part}.txz -C ${RELEASE}/
    rm ${ARCHIVE}/${part}.txz
done
log_end_msg

# go over all files in extracted release
# if file is not present in current fs
# or signature is not matching, it should be staged
: > ${TMP}/stage.list
: > ${TMP}/etcdiff.list
FIRST_RESCUE=""
log_begin_msg "Comparing ${UPGRADE} to current release"
echo -n " " # padding indicator
for file in $(cd ${RELEASE}; find ./); do
    # gather info of files
    file=$(echo ${file} | sed 's/^\.//')
    spath="${RELEASE}/${file}"
    dpath="${ROOT}/${file}"
    owner=$(stat -f %Su ${spath})
    group=$(stat -f %Sg ${spath})
    mode=$(stat -f %Op ${spath} | sed -E 's/.*([0-9]{4})$/\1/')
    flags=$(stat -f %Sf ${spath})
    link=$(readlink ${spath} || true)
    if [ -d ${spath} ]; then
        type=d
    elif [ -L ${spath} ]; then
        type=L
    else
        type=f
        signature=$(sha256 -q ${spath})
    fi

    indicate

    case $type in
        d)
            # we stage all directories
            # so we can set the right flags later on
            ;;
        f)
            # if file already exists, try to detect whether
            # it should be staged or not
            if [ -f ${dpath} ]; then
                # don't stage identical files
                if [ "$(sha256 -q ${dpath})" = "${signature}" ]; then
                    continue
                fi

                # check if anything beside FreeBSD header
                # was even changed
                if echo ${file} | grep -q '\.gz$' && \
                    samegz ${spath} ${dpath}; then
                    continue
                elif samef ${spath} ${dpath}; then
                    continue
                fi

                # don't add base configuration to stage
                if echo ${file} | grep -q '^/etc/' && \
                    ! echo ${file} | grep -qE '^/etc/(rc\.d|mtree|defaults)/'; then
                    echo ${file} >> ${TMP}/etcdiff.list
                    continue
                fi
            fi

            # is this a file from /rescue
            # make sure we link them to each other
            if echo ${file} | grep -q '^/rescue/'; then
              # if this is the first file from /rescue
              # we shouldn't do anything but register which
              # file it is
              if [ -z "${FIRST_RESCUE}" ]; then
                FIRST_RESCUE="${file}"
              else
                # for all other /rescue files, the link target
                # should be the first rescue file
                link="${FIRST_RESCUE}"
              fi
            fi
            ;;
        L)
            # check where link is pointing to
            if [ -L ${dpath} ] && [ "$(readlink ${dpath})" = "${link}" ]; then
                continue
            fi
            ;;
        *)
            echo "Unknown type ${type} (${file})"
            exit 1
            ;;
    esac

    echo "${file}|${type}|${owner}|${group}|${mode}|${flags}|${signature}|${link}" >> ${TMP}/stage.list
done
log_end_msg

# if no files should be staged, we're done
STAGECOUNT=$(wc -l < ${TMP}/stage.list | awk '{print $1}')
if [ ${STAGECOUNT} -eq 0 ]; then
    echo "No files need to be upgraded"
    exit
fi

SHOW_GPT_WARNING=0
if grep -q -E '^/boot/gpt(zfs)?boot' ${TMP}/stage.list; then
    SHOW_GPT_WARNING=1
fi

if [ ${INTERACTIVE} -eq 1 ]; then
    # show summary
    (echo -n "The following files will be updated/added "; \
     echo "as part of upgrading to ${UPGRADE}:"; \
     awk -F'|' '{if ($2 == "f") {print $1}}' ${TMP}/stage.list | sort) | ${PAGER}

    # get confirmation to apply upgrade
    echo -n "Installing upgrade to ${UPGRADE}, proceed? [y/n]: "
    read CONFIRM
    if ! checkyesno ${CONFIRM}; then
        exit
    fi
fi

if [ "$(wc -l < ${TMP}/etcdiff.list)" -gt 0 ]; then
    if [ ${INTERACTIVE} -eq 1 ]; then
        cat <<-EOF
We will now interactively merge your configuration files with the
new release's. For each part choose whether you want the left (l or 1)
or right (r or 2) side of the diff. You can also edit a part before
choosing it, with el/e1 and er/e2 for left and right respectively.

If you decide to stop during merging, none of your current config files
will be touched.

Press any key to proceed:
EOF
        read DISCARD
    fi

    cat ${TMP}/etcdiff.list | while read file; do
        case ${file} in
            # Don't merge these -- we're rebuild them
            # after updates are installed.
            /etc/spwd.db | /etc/pwd.db | /etc/login.conf.db)
                ;;

            *)
                # if file was marked for overwrite
                # we just copy the file and move on
                if [ ! -z "${OVERWRITE}" ] && \
                    echo ${OVERWRITE} | grep -qw ${file}; then
                    cp -p ${RELEASE}/${file} ${ROOT}/${file}
                # invoke sdiff to merge files interactively
                # but only if the file does not match
                # a potential exclude pattern
                # or is listed for exclusion
                elif ([ -z "${EXCLUDE_PTR}" ] || \
                  ! grep -qi -E "${EXCLUDE_PTR}" ${ROOT}/${file}) && \
                  ([ -z "${EXCLUDE}" ] || \
                  ! echo ${EXCLUDE} | grep -qw ${file}) && \
                  ! cmp ${ROOT}/${file} ${RELEASE}/${file}; then
                    echo "==> Merging file: ${file}"
                    if ! sdiff -s -w $(tput cols) -o ${RELEASE}/${file}.new ${ROOT}/${file} ${RELEASE}/${file} < /dev/tty && [ $? -eq 2 ]; then
                        echo "Merge aborted at ${file}"
                        exit
                    fi

                    mv ${RELEASE}/${file}.new ${RELEASE}/${file}
                fi
                ;;
        esac

        unstage ${file}
    done
fi

log_begin_msg "Moving files into place"
echo -n " " # padding indicator
tr '|' ' ' < ${TMP}/stage.list | \
    while read file type owner group mode flags signature link; do

    indicate

    case $type in
        d)
            # Create a directory
            install -d -o ${owner} -g ${group} \
                -m ${mode} ${ROOT}/${file}
            ;;
        f)
            if [ -z "${link}" ]; then
                # Install file, without flags
                install -S -o ${owner} -g ${group} \
                    -m ${mode} ${RELEASE}/${file} ${ROOT}/${file}
            else # do we even have these?
                # Create hard link
                ln -f ${ROOT}/${link} ${ROOT}/${file}
            fi
            ;;
        L)
            # Create symbolic link
            ln -sfh ${link} ${ROOT}/${file}
            ;;
        *)
            echo "unknown type ${type} ($file)"
            exit;
    esac
done
log_end_msg

log_begin_msg "Setting flags"
echo -n " " # padding indicator
tr '|' ' ' < ${TMP}/stage.list | \
    while read file type owner group mode flags signature link; do

    indicate

    if [ "${type}" = "f" ] && \
        ! [ "${flags}" != "" ]; then
        chflags ${flags} ${ROOT}/${file}
    fi
    done
log_end_msg

log_begin_msg "Updating passwd dbs"
pwd_mkdb -d ${ROOT}/etc ${ROOT}/etc/master.passwd
cap_mkdb -f ${ROOT}/etc/login.conf.db ${ROOT}/etc/login.conf
log_end_msg

log_begin_msg "Update linker.hints"
chroot ${ROOT} kldxref /boot/kernel
log_end_msg

cat <<- EOF
    Succesfully upgraded from $(uname -r) to ${UPGRADE}.
    You should reboot your system now, since new binaries are
    expecting to run under the new kernel.
EOF

if [ ${SHOW_GPT_WARNING} -eq 1 ]; then
    cat <<- EOF

    WARNING: during this upgrade, either gptboot or gptzfsboot was
    upgraded as well. If you use GPT partitioning and the GPT boot
    loader, you should update your boot partition as well. For
    instance like this:

    gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 da0

    assuming da0 is your boot device and you're using the non-ZFS
    GPT boot loader.
EOF
fi
